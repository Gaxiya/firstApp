{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { dialogsAddAction, dialogsUpdateAction } from './actions';\nlet initialState = {\n  message: [{\n    text: `I am a normal popover and I can have text and everything`,\n    name: `Dima`\n  }, {\n    text: `I am a normal popover and I can have text and everything`,\n    name: `Me`\n  }, {\n    text: `I am a normal popover and I can have text and everything`,\n    name: `Dima`\n  }, {\n    text: `'I am a normal popover and I can have text and everything`,\n    name: `Me`\n  }],\n  newMessage: '',\n  contacts: [{\n    id: 1,\n    name: `Dima`\n  }, {\n    id: 2,\n    name: `Andrey`\n  }, {\n    id: 3,\n    name: `Sasha`\n  }, {\n    id: 4,\n    name: `Sveta`\n  }, {\n    id: 5,\n    name: `Viktor`\n  }, {\n    id: 6,\n    name: `Another list`\n  }, {\n    id: 7,\n    name: `And another list`\n  }]\n};\nconst dialogsReducer = createReducer(initialState, builder => {\n  builder.addCase(dialogsUpdateAction, (state, action) => {\n    state.newMessage = action.payload.text;\n    return state;\n  }).addCase(dialogsAddAction, (state, action) => {\n    let text = state.newMessage;\n    state.newMessage = '';\n    state.message.push({\n      text,\n      name: `Me`\n    });\n    return state;\n  }).addDefaultCase((state, action) => {\n    return state;\n  });\n}); // const dialogsReducer=(state=initialState,action)=>{\n//     let newstate={...state}\n//     switch(action.type){\n//     case updateNewMessage :{\n//         newstate.newMessage=action.newtext\n//         return newstate\n//     }\n//     case addNewMessage :{\n//         let text=state.newMessage\n//         newstate.newMessage=''\n//         newstate.message.push({text,name:`Me`})\n//         return newstate\n//     }\n//     default:{\n//         return state;\n//     }}\n// }\n\nexport default dialogsReducer;","map":{"version":3,"names":["createReducer","dialogsAddAction","dialogsUpdateAction","initialState","message","text","name","newMessage","contacts","id","dialogsReducer","builder","addCase","state","action","payload","push","addDefaultCase"],"sources":["D:/projects/js/firstApp/my-app/src/Redux/dialogsReducer.js"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit';\nimport { dialogsAddAction, dialogsUpdateAction } from './actions';\nlet initialState= {message:[\n    {text:`I am a normal popover and I can have text and everything`,name:`Dima`},\n    {text:`I am a normal popover and I can have text and everything`,name:`Me`},\n    {text:`I am a normal popover and I can have text and everything`,name:`Dima`},\n    {text:`'I am a normal popover and I can have text and everything`,name:`Me`}\n  ],\n  newMessage:'',\n  contacts:[\n    {id:1,name:`Dima`},\n    {id:2,name:`Andrey`},\n    {id:3,name:`Sasha`},\n    {id:4,name:`Sveta`},\n    {id:5,name:`Viktor`},\n    {id:6,name:`Another list`},\n    {id:7,name:`And another list`}]\n}\n\nconst dialogsReducer = createReducer(initialState,(builder)=>{\n        builder\n        .addCase(dialogsUpdateAction,(state,action)=>{\n            \n            state.newMessage=action.payload.text\n            return state\n        })\n        .addCase(dialogsAddAction,(state,action)=>{\n            \n            let text=state.newMessage\n            state.newMessage=''\n            state.message.push({text,name:`Me`})\n            return state\n        })\n        .addDefaultCase((state, action) => {return state})\n    }\n) \n// const dialogsReducer=(state=initialState,action)=>{\n//     let newstate={...state}\n//     switch(action.type){\n//     case updateNewMessage :{\n//         newstate.newMessage=action.newtext\n        \n//         return newstate\n//     }\n//     case addNewMessage :{\n//         let text=state.newMessage\n//         newstate.newMessage=''\n//         newstate.message.push({text,name:`Me`})\n//         return newstate\n//     }\n//     default:{\n//         return state;\n//     }}\n    \n// }\nexport default dialogsReducer;"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,WAAtD;AACA,IAAIC,YAAY,GAAE;EAACC,OAAO,EAAC,CACvB;IAACC,IAAI,EAAE,0DAAP;IAAiEC,IAAI,EAAE;EAAvE,CADuB,EAEvB;IAACD,IAAI,EAAE,0DAAP;IAAiEC,IAAI,EAAE;EAAvE,CAFuB,EAGvB;IAACD,IAAI,EAAE,0DAAP;IAAiEC,IAAI,EAAE;EAAvE,CAHuB,EAIvB;IAACD,IAAI,EAAE,2DAAP;IAAkEC,IAAI,EAAE;EAAxE,CAJuB,CAAT;EAMhBC,UAAU,EAAC,EANK;EAOhBC,QAAQ,EAAC,CACP;IAACC,EAAE,EAAC,CAAJ;IAAMH,IAAI,EAAE;EAAZ,CADO,EAEP;IAACG,EAAE,EAAC,CAAJ;IAAMH,IAAI,EAAE;EAAZ,CAFO,EAGP;IAACG,EAAE,EAAC,CAAJ;IAAMH,IAAI,EAAE;EAAZ,CAHO,EAIP;IAACG,EAAE,EAAC,CAAJ;IAAMH,IAAI,EAAE;EAAZ,CAJO,EAKP;IAACG,EAAE,EAAC,CAAJ;IAAMH,IAAI,EAAE;EAAZ,CALO,EAMP;IAACG,EAAE,EAAC,CAAJ;IAAMH,IAAI,EAAE;EAAZ,CANO,EAOP;IAACG,EAAE,EAAC,CAAJ;IAAMH,IAAI,EAAE;EAAZ,CAPO;AAPO,CAAlB;AAiBA,MAAMI,cAAc,GAAGV,aAAa,CAACG,YAAD,EAAeQ,OAAD,IAAW;EACrDA,OAAO,CACNC,OADD,CACSV,mBADT,EAC6B,CAACW,KAAD,EAAOC,MAAP,KAAgB;IAEzCD,KAAK,CAACN,UAAN,GAAiBO,MAAM,CAACC,OAAP,CAAeV,IAAhC;IACA,OAAOQ,KAAP;EACH,CALD,EAMCD,OAND,CAMSX,gBANT,EAM0B,CAACY,KAAD,EAAOC,MAAP,KAAgB;IAEtC,IAAIT,IAAI,GAACQ,KAAK,CAACN,UAAf;IACAM,KAAK,CAACN,UAAN,GAAiB,EAAjB;IACAM,KAAK,CAACT,OAAN,CAAcY,IAAd,CAAmB;MAACX,IAAD;MAAMC,IAAI,EAAE;IAAZ,CAAnB;IACA,OAAOO,KAAP;EACH,CAZD,EAaCI,cAbD,CAagB,CAACJ,KAAD,EAAQC,MAAR,KAAmB;IAAC,OAAOD,KAAP;EAAa,CAbjD;AAcH,CAf+B,CAApC,C,CAiBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,eAAeH,cAAf"},"metadata":{},"sourceType":"module"}